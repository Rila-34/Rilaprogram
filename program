    public int[] twoSum(int[] nums, int target) {
        Map<Integer, Integer> numMap = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            int complement = target - nums[i];
            if (numMap.containsKey(complement)) {
                return new int[] { numMap.get(complement), i };
            }
            numMap.put(nums[i], i);
        }
        return new int[] {}; 
    }
}


class Solution {
    public int mySqrt(int x) {
        if (x == 0) {
            return 0;
        }

        long left = 1; 
        long right = x;
        long ans = 0;

        while (left <= right) {
            long mid = left + (right - left) / 2; 
            if (mid * mid == x) {
                return (int) mid;
            } else if (mid * mid < x) {
                ans = mid; 
                left = mid + 1;
            } else {
                right = mid - 1; 
            }
        }
        return (int) ans;
    }
}



class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        
        int p1 = m - 1; 
        int p2 = n - 1; 
        int writeIdx = m + n - 1; 

      
        while (p2 >= 0) {
          
            if (p1 >= 0 && nums1[p1] >= nums2[p2]) {
                nums1[writeIdx] = nums1[p1];
                p1--;
            } else {
                
                nums1[writeIdx] = nums2[p2];
                p2--;
            }
            writeIdx--;
        }
    }
